#!/bin/sh

OURDIR=/home/bind/safedns
LOGDIR=$OURDIR/archive
cd $OURDIR

#-# set to 1 if using CIF feeds (see INSTALL.BIND for details)
USE_CIF=1

/bin/mv -f $OURDIR/malwaredomains $OURDIR/malwaredomains.prev
# remove domain lists
/bin/rm -f $OURDIR/domains.txt 
/bin/rm -f $OURDIR/blocklist.php?download=domainblocklist* 
if [ $USE_CIF -eq 1 ]
then
  /bin/rm -f $OURDIR/ren-isac-*.txt
fi

# Download site list from Malware Domains

wget -N http://malwaredomains.lehigh.edu/files/domains.txt
cat domains.txt | grep -v '#' - | awk -F'\t' '{print $3}' - > $OURDIR/domainlist

# Download Zeus Tracker list

wget --no-check-certificate \
	https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist
cat $OURDIR/blocklist.php\?download\=domainblocklist >> $OURDIR/domainlist

if [ $USE_CIF -eq 1 ]
then
  echo "Downloading CIF feeds..."
  /usr/local/bin/cif -q domain/malware -s medium -c 65 -p csv \
	| egrep -v '^#' \
	| awk -F',' '{print $1}' \
	> $OURDIR/ren-isac-malware.txt
  /usr/local/bin/cif -q domain/botnet -s high -c 65 -p csv \
	| egrep -v '^#' \
	| awk -F',' '{print $1}' \
	> $OURDIR/ren-isac-botnet.txt
  cat $OURDIR/ren-isac-malware.txt $OURDIR/ren-isac-botnet.txt \
	>> $OURDIR/domainlist
fi

# Add internally-defined list of domains to be blacklisted
cat $OURDIR/blacklist.txt >> $OURDIR/domainlist

#-# Remove school.edu, clean up, and sort
cat $OURDIR/domainlist \
	| grep -iv school.edu \
	| sed '/^$/d' | tr -d '\r' \
	| sort -u > $OURDIR/domains.sorted

# Remove internally-whitelisted list of domains 
/bin/grep -whvf $OURDIR/whitelist.txt \
	$OURDIR/domains.sorted \
	> $OURDIR/malwaredomains

# Make sure malware domain list is complaint with RFCs that define the hostname
# format, and insert them into the MySQL database so BIND can point users
# to the walled garden. See validate_and_load.pl for walled garden IP address.
cat $OURDIR/malwaredomains | $OURDIR/validate_and_load.pl 

# archive files used to build malwaredomains file
ARCHNUM=7
while [ $ARCHNUM -gt 0 ]
  do
  ARCHTO=$ARCHNUM
  let "ARCHNUM -= 1"
  if [ -e $LOGDIR/malware-domains.$ARCHNUM.tgz  ]
  then
    /bin/mv $LOGDIR/malware-domains.$ARCHNUM.tgz \
		$LOGDIR/malware-domains.$ARCHTO.tgz
  fi
  done

# Make archive of current set of malicious domain lists
cd $OURDIR && /bin/tar cvfz $LOGDIR/malware-domains.0.tgz \
	domains.txt \
	blocklist.php?download=domainblocklist* \
	ren-isac-*.txt

# Now validate_and_load.pl has populated the file dns_table_updated with 
# the _index of the dns_records_index file updated in MySQL, or 0 if we 
# shouldn't reload BIND

TFLAG="`cat $OURDIR/dns_table_updated`"
BINDDIR=/etc/bind

if test $TFLAG = 1; then
  echo "Telling BIND to reload, using config file pointing to dns_records_1"
  cd $BINDDIR
  /bin/rm -f named.conf.options
  /bin/ln -s named.conf.options_1 named.conf.options
  /usr/sbin/rndc reload
fi
if test $TFLAG = 2; then
  echo "Telling BIND to reload, using config file pointing to dns_records_2"
  cd $BINDDIR
  /bin/rm -f named.conf.options
  /bin/ln -s named.conf.options_2 named.conf.options
  /usr/sbin/rndc reload
fi
if test $TFLAG = 0; then
  echo "No new domains to tell BIND about"
fi

